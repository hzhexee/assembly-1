;==========================================
; ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ И СТРУКТУРА ДАННЫХ
;==========================================
; Программа для определения, имеет ли квадратное уравнение ax^2 + bx + c = 0 действительные корни
;
; Компиляция и сборка:
;   nasm -f elf32 48.asm -o 48.o
;   gcc -m32 48.o -o 48
;
; Запуск: ./48
section .data
    prompt_a db "Введите коэффициент a: ", 0
    prompt_b db "Введите коэффициент b: ", 0
    prompt_c db "Введите коэффициент c: ", 0
    
    has_roots_msg db "Уравнение ax^2 + bx + c = 0 имеет действительные корни", 10, 0
    no_roots_msg db "Уравнение ax^2 + bx + c = 0 не имеет действительных корней", 10, 0
    
    format_in db "%d", 0
    error_msg db "Ошибка: введите целое число! Будет использовано значение 0.", 10, 0
    clear_buffer_fmt db "%c", 0

section .bss
    a resd 1  ; Коэффициент a
    b resd 1  ; Коэффициент b
    c resd 1  ; Коэффициент c
    temp_char resb 1  ; Временная переменная для очистки буфера

;==========================================
; ИСПОЛНЯЕМЫЙ КОД ПРОГРАММЫ
;==========================================
section .text
    global main
    extern printf, scanf

;==========================================
; ПОДПРОГРАММА ОЧИСТКИ БУФЕРА ВВОДА
; Читает символы из буфера ввода до символа новой строки
;==========================================
clear_input_buffer:
    push ebp        ; Сохраняем указатель базового регистра
    mov ebp, esp    ; Устанавливаем новый указатель базового регистра
    
.clear_loop:
    ;----------------------------------------
    ; Подблок: Считывание одного символа из буфера
    ;----------------------------------------
    push temp_char       ; Адрес для сохранения считанного символа
    push clear_buffer_fmt ; Адрес формата для scanf ("%c")
    call scanf           ; Вызываем scanf для чтения одного символа
    add esp, 8           ; Очищаем стек после вызова функции (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка результата чтения символа
    ;----------------------------------------
    cmp eax, 1           ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    jne .end_clear       ; Если не равно 1, заканчиваем очистку
    
    mov al, [temp_char]  ; Загружаем считанный символ в al
    cmp al, 10           ; Сравниваем с символом новой строки ('\n')
    je .end_clear        ; Если это символ новой строки, заканчиваем очистку
    
    jmp .clear_loop      ; Продолжаем цикл очистки
    
.end_clear:
    mov esp, ebp         ; Восстанавливаем указатель стека
    pop ebp              ; Восстанавливаем указатель базового регистра
    ret                  ; Возврат из подпрограммы

;==========================================
; ГЛАВНАЯ ФУНКЦИЯ ПРОГРАММЫ
; Считывает коэффициенты квадратного уравнения и определяет,
; имеет ли уравнение действительные корни
;==========================================
main:
    ;----------------------------------------
    ; Подблок: Настройка кадра стека
    ;----------------------------------------
    push ebp            ; Сохраняем указатель базового регистра
    mov ebp, esp        ; Устанавливаем новый указатель базового регистра
    
    ;----------------------------------------
    ; Подблок: Ввод коэффициента a
    ;----------------------------------------
    push prompt_a       ; Адрес строки приглашения для a
    call printf         ; Вызов printf для вывода приглашения
    add esp, 4          ; Очистка стека после вызова (1 параметр по 4 байта)
    
    push a              ; Адрес переменной для сохранения коэффициента a
    push format_in      ; Адрес формата для scanf ("%d")
    call scanf          ; Вызов scanf для считывания числа
    add esp, 8          ; Очистка стека после вызова (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода a
    ;----------------------------------------
    cmp eax, 1          ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    je .valid_a_input   ; Если равно 1, переходим к вводу b
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода a
    ;----------------------------------------
    push error_msg      ; Адрес сообщения об ошибке
    call printf         ; Вызов printf для вывода сообщения об ошибке
    add esp, 4          ; Очистка стека после вызова
    
    call clear_input_buffer ; Вызов функции очистки буфера ввода
    
    mov dword [a], 0    ; Устанавливаем значение по умолчанию (a = 0)

.valid_a_input:
    ;----------------------------------------
    ; Подблок: Ввод коэффициента b
    ;----------------------------------------
    push prompt_b       ; Адрес строки приглашения для b
    call printf         ; Вызов printf для вывода приглашения
    add esp, 4          ; Очистка стека после вызова (1 параметр по 4 байта)
    
    push b              ; Адрес переменной для сохранения коэффициента b
    push format_in      ; Адрес формата для scanf ("%d")
    call scanf          ; Вызов scanf для считывания числа
    add esp, 8          ; Очистка стека после вызова (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода b
    ;----------------------------------------
    cmp eax, 1          ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    je .valid_b_input   ; Если равно 1, переходим к вводу c
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода b
    ;----------------------------------------
    push error_msg      ; Адрес сообщения об ошибке
    call printf         ; Вызов printf для вывода сообщения об ошибке
    add esp, 4          ; Очистка стека после вызова
    
    call clear_input_buffer ; Вызов функции очистки буфера ввода
    
    mov dword [b], 0    ; Устанавливаем значение по умолчанию (b = 0)

.valid_b_input:
    ;----------------------------------------
    ; Подблок: Ввод коэффициента c
    ;----------------------------------------
    push prompt_c       ; Адрес строки приглашения для c
    call printf         ; Вызов printf для вывода приглашения
    add esp, 4          ; Очистка стека после вызова (1 параметр по 4 байта)
    
    push c              ; Адрес переменной для сохранения коэффициента c
    push format_in      ; Адрес формата для scanf ("%d")
    call scanf          ; Вызов scanf для считывания числа
    add esp, 8          ; Очистка стека после вызова (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода c
    ;----------------------------------------
    cmp eax, 1          ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    je .valid_c_input   ; Если равно 1, переходим к расчету дискриминанта
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода c
    ;----------------------------------------
    push error_msg      ; Адрес сообщения об ошибке
    call printf         ; Вызов printf для вывода сообщения об ошибке
    add esp, 4          ; Очистка стека после вызова
    
    call clear_input_buffer ; Вызов функции очистки буфера ввода
    
    mov dword [c], 0    ; Устанавливаем значение по умолчанию (c = 0)

.valid_c_input:
    ;==========================================
    ; БЛОК ВЫЧИСЛЕНИЙ: ДИСКРИМИНАНТ
    ; Вычисляет дискриминант квадратного уравнения: D = b^2 - 4*a*c
    ; и определяет наличие действительных корней
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Вычисление b^2
    ;----------------------------------------
    mov eax, [b]        ; Загружаем коэффициент b
    imul eax, [b]       ; eax = b^2 (умножаем b на b)
    
    ;----------------------------------------
    ; Подблок: Вычисление 4*a*c
    ;----------------------------------------
    mov ebx, [a]        ; Загружаем коэффициент a
    imul ebx, 4         ; ebx = 4*a (умножаем a на 4)
    imul ebx, [c]       ; ebx = 4*a*c (умножаем 4*a на c)
    
    ;----------------------------------------
    ; Подблок: Вычисление дискриминанта D = b^2 - 4*a*c
    ;----------------------------------------
    sub eax, ebx        ; eax = b^2 - 4*a*c (вычитаем 4*a*c из b^2)
    
    ;----------------------------------------
    ; Подблок: Проверка значения дискриминанта
    ;----------------------------------------
    cmp eax, 0          ; Сравниваем дискриминант с 0
    jl no_roots         ; Если D < 0, уравнение не имеет действительных корней
    
    ;----------------------------------------
    ; Подблок: Вывод результата при наличии корней
    ;----------------------------------------
    push has_roots_msg  ; Адрес строки сообщения о наличии корней
    call printf         ; Вызов printf для вывода сообщения
    add esp, 4          ; Очистка стека после вызова (1 параметр по 4 байта)
    jmp end             ; Переход к завершению программы
    
no_roots:
    ;----------------------------------------
    ; Подблок: Вывод результата при отсутствии корней
    ;----------------------------------------
    push no_roots_msg   ; Адрес строки сообщения об отсутствии корней
    call printf         ; Вызов printf для вывода сообщения
    add esp, 4          ; Очистка стека после вызова (1 параметр по 4 байта)
    
end:
    ;==========================================
    ; БЛОК ЗАВЕРШЕНИЯ ПРОГРАММЫ
    ; Корректно завершает программу с кодом выхода 0
    ;==========================================
    mov esp, ebp        ; Восстанавливаем указатель стека
    pop ebp             ; Восстанавливаем указатель базового регистра
    xor eax, eax        ; Устанавливаем код возврата 0 (успешное завершение)
    ret                 ; Возврат из функции main
