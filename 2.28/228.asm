;==========================================
; ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ И СТРУКТУРА ДАННЫХ
;==========================================
; Компиляция и сборка:
;   nasm -f elf32 228.asm -o 228.o
;   gcc -m32 228.o -o 228
;
; Запуск: ./228

section .data        ; Секция данных - здесь объявляются инициализированные данные
    prompt_a db "Введите a: ", 0    ; Строка для запроса ввода переменной a
    prompt_b db "Введите b: ", 0    ; Строка для запроса ввода переменной b
    prompt_c db "Введите c: ", 0    ; Строка для запроса ввода переменной c
    prompt_d db "Введите d: ", 0    ; Строка для запроса ввода переменной d
    result_msg db "Результат (a-b)+(c+d) = %d", 10, 0   ; Строка для вывода результата с форматом для числа
    format_in db "%d", 0    ; Формат для ввода целого числа
    error_msg db "Ошибка: введите целое число! Будет использовано значение 0.", 10, 0  ; Сообщение об ошибке
    clear_buffer_fmt db "%c", 0     ; Формат для считывания одного символа при очистке буфера

section .bss         ; Секция неинициализированных данных
    a resd 1         ; Резервируем 4 байта для переменной a
    b resd 1         ; Резервируем 4 байта для переменной b
    c resd 1         ; Резервируем 4 байта для переменной c
    d resd 1         ; Резервируем 4 байта для переменной d
    temp_char resb 1  ; Резервируем 1 байт для временного символа при очистке буфера

;==========================================
; ИСПОЛНЯЕМЫЙ КОД ПРОГРАММЫ
;==========================================
section .text        ; Секция кода программы
    global main      ; Объявление глобальной метки main - точки входа в программу
    extern printf, scanf  ; Объявление внешних функций из стандартной библиотеки C

;==========================================
; ВСПОМОГАТЕЛЬНАЯ ФУНКЦИЯ ОЧИСТКИ БУФЕРА ВВОДА
; Очищает буфер ввода до символа новой строки
;==========================================
clear_input_buffer:
    ;----------------------------------------
    ; Подблок: Создание стекового фрейма
    ;----------------------------------------
    push ebp         ; Сохраняем значение базового указателя
    mov ebp, esp     ; Устанавливаем новый базовый указатель
    
.clear_loop:         ; Начало цикла очистки буфера
    ;----------------------------------------
    ; Подблок: Считывание одного символа из буфера
    ;----------------------------------------
    push temp_char   ; Аргумент для scanf - адрес переменной для сохранения символа
    push clear_buffer_fmt  ; Аргумент для scanf - формат ввода
    call scanf       ; Вызываем функцию scanf для чтения одного символа
    add esp, 8       ; Очищаем стек после вызова функции (2 аргумента по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка символа на признак конца строки
    ;----------------------------------------
    cmp eax, 1       ; Сравниваем результат scanf с 1 (успешно прочитан один элемент)
    jne .end_clear   ; Если не равно 1, значит достигнут конец ввода
    
    mov al, [temp_char]  ; Загружаем считанный символ в регистр al
    cmp al, 10      ; Сравниваем с ASCII-кодом символа новой строки ('\n')
    je .end_clear   ; Если это символ новой строки, завершаем очистку
    
    jmp .clear_loop  ; Иначе продолжаем читать символы из буфера
    
.end_clear:          ; Метка завершения очистки буфера
    ;----------------------------------------
    ; Подблок: Восстановление стекового фрейма и возврат
    ;----------------------------------------
    mov esp, ebp     ; Восстанавливаем указатель стека
    pop ebp          ; Восстанавливаем базовый указатель
    ret              ; Возвращаемся из функции

;==========================================
; ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ
; Запрашивает ввод четырех чисел и вычисляет (a-b)+(c+d)
;==========================================
main:
    ;----------------------------------------
    ; Подблок: Создание стекового фрейма
    ;----------------------------------------
    push ebp         ; Сохраняем значение базового указателя
    mov ebp, esp     ; Устанавливаем новый базовый указатель
    
    ;==========================================
    ; БЛОК ВВОДА ПЕРЕМЕННОЙ A
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Вывод приглашения для ввода a
    ;----------------------------------------
    push prompt_a    ; Помещаем адрес строки приглашения в стек
    call printf      ; Вызываем функцию printf для вывода строки
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Чтение значения a
    ;----------------------------------------
    push a           ; Аргумент для scanf - адрес переменной a
    push format_in   ; Аргумент для scanf - формат ввода
    call scanf       ; Вызываем функцию scanf для чтения числа
    add esp, 8       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода a
    ;----------------------------------------
    cmp eax, 1       ; Сравниваем результат scanf с 1 (успешно прочитано одно число)
    je .valid_a      ; Если равно 1, переходим к метке .valid_a (ввод корректен)
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода для a
    ;----------------------------------------
    push error_msg   ; Помещаем адрес сообщения об ошибке в стек
    call printf      ; Вызываем функцию printf для вывода сообщения
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Очистка буфера ввода
    ;----------------------------------------
    call clear_input_buffer  ; Вызываем функцию очистки буфера ввода
    
    ;----------------------------------------
    ; Подблок: Установка значения по умолчанию для a
    ;----------------------------------------
    mov dword [a], 0  ; Устанавливаем значение переменной a равным 0
    
.valid_a:            ; Метка для продолжения после проверки a
    ;==========================================
    ; БЛОК ВВОДА ПЕРЕМЕННОЙ B
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Вывод приглашения для ввода b
    ;----------------------------------------
    push prompt_b    ; Помещаем адрес строки приглашения в стек
    call printf      ; Вызываем функцию printf для вывода строки
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Чтение значения b
    ;----------------------------------------
    push b           ; Аргумент для scanf - адрес переменной b
    push format_in   ; Аргумент для scanf - формат ввода
    call scanf       ; Вызываем функцию scanf для чтения числа
    add esp, 8       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода b
    ;----------------------------------------
    cmp eax, 1       ; Сравниваем результат scanf с 1
    je .valid_b      ; Если равно 1, переходим к метке .valid_b
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода для b
    ;----------------------------------------
    push error_msg   ; Помещаем адрес сообщения об ошибке в стек
    call printf      ; Вызываем функцию printf для вывода сообщения
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Очистка буфера ввода
    ;----------------------------------------
    call clear_input_buffer  ; Вызываем функцию очистки буфера ввода
    
    ;----------------------------------------
    ; Подблок: Установка значения по умолчанию для b
    ;----------------------------------------
    mov dword [b], 0  ; Устанавливаем значение переменной b равным 0
    
.valid_b:            ; Метка для продолжения после проверки b
    ;==========================================
    ; БЛОК ВВОДА ПЕРЕМЕННОЙ C
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Вывод приглашения для ввода c
    ;----------------------------------------
    push prompt_c    ; Помещаем адрес строки приглашения в стек
    call printf      ; Вызываем функцию printf для вывода строки
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Чтение значения c
    ;----------------------------------------
    push c           ; Аргумент для scanf - адрес переменной c
    push format_in   ; Аргумент для scanf - формат ввода
    call scanf       ; Вызываем функцию scanf для чтения числа
    add esp, 8       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода c
    ;----------------------------------------
    cmp eax, 1       ; Сравниваем результат scanf с 1
    je .valid_c      ; Если равно 1, переходим к метке .valid_c
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода для c
    ;----------------------------------------
    push error_msg   ; Помещаем адрес сообщения об ошибке в стек
    call printf      ; Вызываем функцию printf для вывода сообщения
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Очистка буфера ввода
    ;----------------------------------------
    call clear_input_buffer  ; Вызываем функцию очистки буфера ввода
    
    ;----------------------------------------
    ; Подблок: Установка значения по умолчанию для c
    ;----------------------------------------
    mov dword [c], 0  ; Устанавливаем значение переменной c равным 0
    
.valid_c:            ; Метка для продолжения после проверки c
    ;==========================================
    ; БЛОК ВВОДА ПЕРЕМЕННОЙ D
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Вывод приглашения для ввода d
    ;----------------------------------------
    push prompt_d    ; Помещаем адрес строки приглашения в стек
    call printf      ; Вызываем функцию printf для вывода строки
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Чтение значения d
    ;----------------------------------------
    push d           ; Аргумент для scanf - адрес переменной d
    push format_in   ; Аргумент для scanf - формат ввода
    call scanf       ; Вызываем функцию scanf для чтения числа
    add esp, 8       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода d
    ;----------------------------------------
    cmp eax, 1       ; Сравниваем результат scanf с 1
    je .valid_d      ; Если равно 1, переходим к метке .valid_d
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода для d
    ;----------------------------------------
    push error_msg   ; Помещаем адрес сообщения об ошибке в стек
    call printf      ; Вызываем функцию printf для вывода сообщения
    add esp, 4       ; Очищаем стек после вызова функции
    
    ;----------------------------------------
    ; Подблок: Очистка буфера ввода
    ;----------------------------------------
    call clear_input_buffer  ; Вызываем функцию очистки буфера ввода
    
    ;----------------------------------------
    ; Подблок: Установка значения по умолчанию для d
    ;----------------------------------------
    mov dword [d], 0  ; Устанавливаем значение переменной d равным 0
    
.valid_d:            ; Метка для продолжения после проверки d
    ;==========================================
    ; БЛОК ВЫЧИСЛЕНИЙ: (a-b)+(c+d)
    ; Вычисляет значение выражения и сохраняет в eax
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Вычисление (a-b)
    ;----------------------------------------
    mov eax, [a]     ; Загружаем значение a в eax
    sub eax, [b]     ; Вычитаем b из a (eax = a-b)
    
    ;----------------------------------------
    ; Подблок: Вычисление (c+d)
    ;----------------------------------------
    mov ebx, [c]     ; Загружаем значение c в ebx
    add ebx, [d]     ; Добавляем d к c (ebx = c+d)
    
    ;----------------------------------------
    ; Подблок: Сложение результатов
    ;----------------------------------------
    add eax, ebx     ; Складываем (a-b) и (c+d), результат в eax
    
    ;==========================================
    ; БЛОК ВЫВОДА РЕЗУЛЬТАТОВ
    ; Выводит метку "Результат (a-b)+(c+d) = " и значение выражения
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Вывод результата
    ;----------------------------------------
    push eax         ; Помещаем результат в стек как второй аргумент для printf
    push result_msg  ; Помещаем адрес строки результата в стек как первый аргумент
    call printf      ; Вызываем функцию printf для вывода результата
    add esp, 8       ; Очищаем стек после вызова функции
    
    ;==========================================
    ; БЛОК ЗАВЕРШЕНИЯ ПРОГРАММЫ
    ; Корректно завершает программу и возвращает код 0
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Восстановление стекового фрейма и завершение
    ;----------------------------------------
    mov esp, ebp     ; Восстанавливаем указатель стека
    pop ebp          ; Восстанавливаем базовый указатель
    xor eax, eax     ; Устанавливаем код возврата 0 (успешное выполнение)
    ret              ; Возвращаемся из функции main
