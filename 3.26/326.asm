;==========================================
; ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ И СТРУКТУРА ДАННЫХ
;==========================================
; Программа для вычисления суммы первых n членов ряда A(k) = 3*k^2 - 2*k + 1
;
; Компиляция и сборка:
;   nasm -f elf32 326.asm -o 326.o
;   gcc -m32 326.o -o 326
;
; Запуск: ./326
section .data
    prompt_msg db 'Введите количество членов ряда (по умолчанию 5): ', 0
    result_msg db 'Сумма первых %d членов ряда A(k) = 3*k^2 - 2*k + 1: %d', 10, 0
    format_in db '%d', 0
    error_msg db 'Ошибка: введите целое число! Будет использовано значение 5.', 10, 0
    clear_buffer_fmt db '%c', 0

section .bss
    n resd 1       ; Количество членов ряда
    sum resd 1     ; Сумма членов ряда
    temp_char resb 1 ; Временная переменная для очистки буфера

;==========================================
; ИСПОЛНЯЕМЫЙ КОД ПРОГРАММЫ
;==========================================
section .text
    global main
    extern printf
    extern scanf

;==========================================
; ПОДПРОГРАММА ОЧИСТКИ БУФЕРА ВВОДА
; Читает символы из буфера ввода до символа новой строки
;==========================================
clear_input_buffer:
    push ebp        ; Сохраняем указатель базового регистра
    mov ebp, esp    ; Устанавливаем новый указатель базового регистра
    
.clear_loop:
    ;----------------------------------------
    ; Подблок: Считывание одного символа из буфера
    ;----------------------------------------
    push temp_char     ; Адрес для сохранения считанного символа
    push clear_buffer_fmt ; Адрес формата для scanf ("%c")
    call scanf         ; Вызываем scanf для чтения одного символа
    add esp, 8         ; Очищаем стек после вызова функции (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка результата чтения символа
    ;----------------------------------------
    cmp eax, 1         ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    jne .end_clear     ; Если не равно 1, заканчиваем очистку
    
    mov al, [temp_char] ; Загружаем считанный символ в al
    cmp al, 10          ; Сравниваем с символом новой строки ('\n')
    je .end_clear       ; Если это символ новой строки, заканчиваем очистку
    
    jmp .clear_loop     ; Продолжаем цикл очистки
    
.end_clear:
    mov esp, ebp       ; Восстанавливаем указатель стека
    pop ebp            ; Восстанавливаем указатель базового регистра
    ret                ; Возврат из подпрограммы

;==========================================
; ГЛАВНАЯ ФУНКЦИЯ ПРОГРАММЫ
; Считывает ввод пользователя, вычисляет сумму ряда и выводит результат
;==========================================
main:
    ;----------------------------------------
    ; Подблок: Вывод приглашения для ввода
    ;----------------------------------------
    push prompt_msg    ; Адрес строки приглашения
    call printf        ; Вызов printf для вывода приглашения
    add esp, 4         ; Очистка стека после вызова (1 параметр по 4 байта)

    ;----------------------------------------
    ; Подблок: Чтение пользовательского ввода
    ;----------------------------------------
    push n             ; Адрес переменной для сохранения ввода
    push format_in     ; Адрес формата для scanf ("%d")
    call scanf         ; Вызов scanf для считывания числа
    add esp, 8         ; Очистка стека после вызова (2 параметра по 4 байта)

    ;----------------------------------------
    ; Подблок: Проверка корректности ввода
    ;----------------------------------------
    cmp eax, 1         ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    je .check_value    ; Если равно 1, переходим к проверке значения
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода
    ;----------------------------------------
    push error_msg     ; Адрес сообщения об ошибке
    call printf        ; Вызов printf для вывода сообщения об ошибке
    add esp, 4         ; Очистка стека после вызова
    
    call clear_input_buffer ; Вызов функции очистки буфера ввода
    
    mov dword [n], 5   ; Устанавливаем значение по умолчанию (n = 5)
    jmp calculate_start ; Переходим к началу вычислений

.check_value:
    ;----------------------------------------
    ; Подблок: Проверка на положительное значение
    ;----------------------------------------
    mov eax, [n]       ; Загружаем введенное значение n
    cmp eax, 0         ; Сравниваем с нулем
    jg calculate_start ; Если больше нуля, переходим к вычислениям
    
    mov dword [n], 5   ; Если не больше нуля, устанавливаем значение по умолчанию (n = 5)

;==========================================
; БЛОК ВЫЧИСЛЕНИЯ СУММЫ РЯДА
; Вычисляет сумму первых n членов ряда A(k) = 3*k^2 - 2*k + 1
;==========================================
calculate_start:
    ;----------------------------------------
    ; Подблок: Инициализация переменных для вычисления
    ;----------------------------------------
    mov dword [sum], 0 ; Инициализируем сумму нулем
    mov ecx, [n]       ; Устанавливаем счетчик цикла равным n
    mov edx, 1         ; Устанавливаем k = 1 (первый член ряда)
    
calculate_loop:
    ;----------------------------------------
    ; Подблок: Вычисление члена ряда A(k) = 3*k^2 - 2*k + 1
    ;----------------------------------------
    mov eax, edx       ; eax = k
    imul eax, eax      ; eax = k^2
    imul eax, 3        ; eax = 3*k^2
    
    mov ebx, edx       ; ebx = k
    imul ebx, 2        ; ebx = 2*k
    sub eax, ebx       ; eax = 3*k^2 - 2*k
    add eax, 1         ; eax = 3*k^2 - 2*k + 1
    
    ;----------------------------------------
    ; Подблок: Обновление суммы
    ;----------------------------------------
    add [sum], eax     ; sum += A(k)
    
    ;----------------------------------------
    ; Подблок: Обновление счетчика и проверка условия цикла
    ;----------------------------------------
    inc edx            ; Увеличиваем k на 1 для следующей итерации
    loop calculate_loop ; Уменьшаем ecx на 1 и повторяем цикл, если ecx != 0
    
    ;----------------------------------------
    ; Подблок: Вывод результата
    ;----------------------------------------
    push dword [sum]   ; Значение суммы для вывода
    push dword [n]     ; Количество членов ряда для вывода
    push result_msg    ; Адрес строки формата результата
    call printf        ; Вызов printf для вывода результата
    add esp, 12        ; Очистка стека после вызова (3 параметра по 4 байта)
    
    ;==========================================
    ; БЛОК ЗАВЕРШЕНИЯ ПРОГРАММЫ
    ; Корректно завершает программу с кодом выхода 0
    ;==========================================
    mov eax, 0         ; Устанавливаем код возврата 0 (успешное завершение)
    ret                ; Возврат из функции main
