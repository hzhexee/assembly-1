;==========================================
; ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ И СТРУКТУРА ДАННЫХ
;==========================================
; Программа для определения, находится ли точка M(x,y) внутри квадрата с координатами (2,2) - (4,4)
;
; Компиляция и сборка:
;   nasm -f elf32 42.asm -o 42.o
;   gcc -m32 42.o -o 42
;
; Запуск: ./42
section .data
    prompt_x db "Введите координату x: ", 0
    prompt_y db "Введите координату y: ", 0
    inside_msg db "Точка M(%d, %d) находится внутри квадрата", 10, 0
    outside_msg db "Точка M(%d, %d) находится вне квадрата", 10, 0
    format_in db "%d", 0
    error_msg db "Ошибка: введите целое число! Будет использовано значение 0.", 10, 0
    clear_buffer_fmt db "%c", 0

section .bss
    x_coord resd 1      ; Координата x точки
    y_coord resd 1      ; Координата y точки
    temp_char resb 1    ; Временная переменная для очистки буфера

;==========================================
; ИСПОЛНЯЕМЫЙ КОД ПРОГРАММЫ
;==========================================
section .text
    global main
    extern printf, scanf

;==========================================
; ПОДПРОГРАММА ОЧИСТКИ БУФЕРА ВВОДА
; Читает символы из буфера ввода до символа новой строки
;==========================================
clear_input_buffer:
    push ebp        ; Сохраняем указатель базового регистра
    mov ebp, esp    ; Устанавливаем новый указатель базового регистра
    
.clear_loop:
    ;----------------------------------------
    ; Подблок: Считывание одного символа из буфера
    ;----------------------------------------
    push temp_char       ; Адрес для сохранения считанного символа
    push clear_buffer_fmt ; Адрес формата для scanf ("%c")
    call scanf           ; Вызываем scanf для чтения одного символа
    add esp, 8           ; Очищаем стек после вызова функции (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка результата чтения символа
    ;----------------------------------------
    cmp eax, 1           ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    jne .end_clear       ; Если не равно 1, заканчиваем очистку
    
    mov al, [temp_char]  ; Загружаем считанный символ в al
    cmp al, 10           ; Сравниваем с символом новой строки ('\n')
    je .end_clear        ; Если это символ новой строки, заканчиваем очистку
    
    jmp .clear_loop      ; Продолжаем цикл очистки
    
.end_clear:
    mov esp, ebp         ; Восстанавливаем указатель стека
    pop ebp              ; Восстанавливаем указатель базового регистра
    ret                  ; Возврат из подпрограммы

;==========================================
; ГЛАВНАЯ ФУНКЦИЯ ПРОГРАММЫ
; Считывает координаты точки (x,y) и определяет,
; находится ли она внутри квадрата с координатами (2,2) - (4,4)
;==========================================
main:
    ;----------------------------------------
    ; Подблок: Настройка кадра стека
    ;----------------------------------------
    push ebp            ; Сохраняем указатель базового регистра
    mov ebp, esp        ; Устанавливаем новый указатель базового регистра
    
    ;----------------------------------------
    ; Подблок: Ввод координаты x
    ;----------------------------------------
    push prompt_x       ; Адрес строки приглашения для x
    call printf         ; Вызов printf для вывода приглашения
    add esp, 4          ; Очистка стека после вызова (1 параметр по 4 байта)
    
    push x_coord        ; Адрес переменной для сохранения координаты x
    push format_in      ; Адрес формата для scanf ("%d")
    call scanf          ; Вызов scanf для считывания числа
    add esp, 8          ; Очистка стека после вызова (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода x
    ;----------------------------------------
    cmp eax, 1          ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    je .valid_x_input   ; Если равно 1, переходим к вводу y
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода x
    ;----------------------------------------
    push error_msg      ; Адрес сообщения об ошибке
    call printf         ; Вызов printf для вывода сообщения об ошибке
    add esp, 4          ; Очистка стека после вызова
    
    call clear_input_buffer ; Вызов функции очистки буфера ввода
    
    mov dword [x_coord], 0 ; Устанавливаем значение по умолчанию (x = 0)

.valid_x_input:
    ;----------------------------------------
    ; Подблок: Ввод координаты y
    ;----------------------------------------
    push prompt_y       ; Адрес строки приглашения для y
    call printf         ; Вызов printf для вывода приглашения
    add esp, 4          ; Очистка стека после вызова (1 параметр по 4 байта)
    
    push y_coord        ; Адрес переменной для сохранения координаты y
    push format_in      ; Адрес формата для scanf ("%d")
    call scanf          ; Вызов scanf для считывания числа
    add esp, 8          ; Очистка стека после вызова (2 параметра по 4 байта)
    
    ;----------------------------------------
    ; Подблок: Проверка корректности ввода y
    ;----------------------------------------
    cmp eax, 1          ; Сравниваем возвращаемое значение scanf с 1 (успешное считывание)
    je .valid_y_input   ; Если равно 1, переходим к проверке положения точки
    
    ;----------------------------------------
    ; Подблок: Обработка ошибки ввода y
    ;----------------------------------------
    push error_msg      ; Адрес сообщения об ошибке
    call printf         ; Вызов printf для вывода сообщения об ошибке
    add esp, 4          ; Очистка стека после вызова
    
    call clear_input_buffer ; Вызов функции очистки буфера ввода
    
    mov dword [y_coord], 0 ; Устанавливаем значение по умолчанию (y = 0)

.valid_y_input:
    ;==========================================
    ; БЛОК ПРОВЕРКИ ПОЛОЖЕНИЯ ТОЧКИ
    ; Проверяет, находится ли точка внутри квадрата с координатами (2,2) - (4,4)
    ;==========================================
    
    ;----------------------------------------
    ; Подблок: Проверка нижних границ квадрата
    ;----------------------------------------
    mov eax, [x_coord]  ; Загружаем x-координату
    cmp eax, 2          ; Сравниваем с нижней границей по x (x = 2)
    jl outside          ; Если x < 2, точка вне квадрата
    
    mov eax, [y_coord]  ; Загружаем y-координату
    cmp eax, 2          ; Сравниваем с нижней границей по y (y = 2)
    jl outside          ; Если y < 2, точка вне квадрата
    
    ;----------------------------------------
    ; Подблок: Проверка верхних границ квадрата
    ;----------------------------------------
    mov eax, [x_coord]  ; Загружаем x-координату
    cmp eax, 4          ; Сравниваем с верхней границей по x (x = 4)
    jg outside          ; Если x > 4, точка вне квадрата
    
    mov eax, [y_coord]  ; Загружаем y-координату
    cmp eax, 4          ; Сравниваем с верхней границей по y (y = 4)
    jg outside          ; Если y > 4, точка вне квадрата
    
    ;----------------------------------------
    ; Подблок: Вывод сообщения о точке внутри квадрата
    ;----------------------------------------
    push dword [y_coord] ; Значение y для вывода
    push dword [x_coord] ; Значение x для вывода
    push inside_msg     ; Адрес строки сообщения
    call printf         ; Вызов printf для вывода сообщения
    add esp, 12         ; Очистка стека после вызова (3 параметра по 4 байта)
    jmp end             ; Переход к завершению программы
    
outside:
    ;----------------------------------------
    ; Подблок: Вывод сообщения о точке вне квадрата
    ;----------------------------------------
    push dword [y_coord] ; Значение y для вывода
    push dword [x_coord] ; Значение x для вывода
    push outside_msg    ; Адрес строки сообщения
    call printf         ; Вызов printf для вывода сообщения
    add esp, 12         ; Очистка стека после вызова (3 параметра по 4 байта)
    
end:
    ;==========================================
    ; БЛОК ЗАВЕРШЕНИЯ ПРОГРАММЫ
    ; Корректно завершает программу с кодом выхода 0
    ;==========================================
    mov esp, ebp        ; Восстанавливаем указатель стека
    pop ebp             ; Восстанавливаем указатель базового регистра
    xor eax, eax        ; Устанавливаем код возврата 0 (успешное завершение)
    ret                 ; Возврат из функции main
